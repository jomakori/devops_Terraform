
# ┌──────────────────────────────────────────────────────────────────────────┐
# │ Configure ArgoCD Global Settings                                         │
# └──────────────────────────────────────────────────────────────────────────┘
global:
  domain: ${DOMAIN}
controller:
  enableStatefulSet: true

# ┌──────────────────────────────────────────────────────────────────────────┐
# │ Configure ArgoCD ConfigMap                                               │
# └──────────────────────────────────────────────────────────────────────────┘
configs:
  params:
    # Fixes redirect issue - https://github.com/argoproj/argo-cd/issues/2953
    server.insecure: true
  cm:
    create: true
    admin.enabled: false # Enforce SSO
    exec.enabled: true   # Enable terminal: https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal/
    # Enables SSO via GitHub creds
    dex.config: |
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: ${SSO_APP_ID}
            clientSecret: ${SSO_APP_SECRET}
            orgs:
              - name: ${GH_ORG}
  # Control Access
  ## Grant access to users RichContext `Engineering` group
  rbac:
    policy.csv: g, ${GH_ORG}:Engineering, role:admin
# ┌──────────────────────────────────────────────────────────────────────────┐
# │ Configure ArgoCD Server Settings                                         │
# └──────────────────────────────────────────────────────────────────────────┘
server:
  autoscaling:
    enabled: true
    minReplicas: 1
  resources:
    requests:
      cpu: 128m
      memory: 512Mi
  # Configure ArgoCD Ingress
  ingressGrpc:
    enabled: false  # not needed
  ingress:
    enabled: true
    controller: aws
    labels:
      app: argocd-server
    annotations:
      ## Ingress Core Settings
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/target-type: instance
      alb.ingress.kubernetes.io/scheme: internet-facing
      ## Ingress SSL/TlS Settings
      alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-2:376424775662:certificate/6e1523fd-ced9-4d7e-abe8-0ed7e0d63fac"
      alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/ssl-redirect: '443'
  service:
    labels:
      app: argocd-server
    type: NodePort
  # Configure ArgoCD repoServer settings
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1
    resources:
      requests:
        cpu: 128m
        memory: 64Mi


# ┌──────────────────────────────────────────────────────────────────────────┐
# │ Configure ArgoCD Notifications                                           │
# └──────────────────────────────────────────────────────────────────────────┘
notifications:
  enabled: true
  # Slack Access
  secret:
    create: true
    items: 
      slack-token: ${SLACK_NOTIFY_TOKEN}
  notifiers: 
    service.slack: |
      token: $slack-token
  # -- Slack Notification Templates: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/
  templates:
    template.app-deployed: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} *{{.app.metadata.name}}* has deployed successfully
      slack:
        attachments: |
          [{
            "title": "ArgoCD Dashboard",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?view=network&resource=",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-failed: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} *{{.app.metadata.name}}* deployment has failed: {{.app.status.operationState.message}}
      slack:
        attachments: |-
          [{
            "title": "ArgoCD Dashboard",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?view=network&resource=",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-running: |
      message: |
        Currently syncing *{{.app.metadata.name}}*
      slack:
        attachments: |-
          [{
            "title": "ArgoCD Dashboard",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?view=network&resource=",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-status-unknown: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} *{{.app.metadata.name}}* status is 'Unknown'.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
      slack:
        attachments: |-
          [{
            "title": "ArgoCD Dashboard",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?view=network&resource=",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-succeeded: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} *{{.app.metadata.name}}* has successfully synced
      slack:
        attachments: |-
          [{
            "title": "ArgoCD Dashboard",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?view=network&resource=",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
  # -- Slack Notification Triggers: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
